<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
                "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">

<!-- 配置生成器 -->
<generatorConfiguration>
  <!-- 数据库驱动:选择你的本地硬盘上面的数据库驱动包  C:\Users\wang\.m2\repository\mysql\mysql-connector-java\8.0.13\mysql-connector-java-8.0.13.jar C:\Users\wang\.m2\repository\mysql\mysql-connector-java\5.1.30\mysql-connector-java-5.1.30.jar-->
    <!-- <classPathEntry  location="C:\Users\wang\.m2\repository\mysql\mysql-connector-java\8.0.13\mysql-connector-java-8.0.13.jar"/>-->
    <!--
    context:生成一组对象的环境
    id:必选，上下文id，用于在生成错误时提示
    defaultModelType:指定生成对象的样式
        1，conditional：类似hierarchical；
        2，flat：所有内容（主键，blob）等全部生成在一个对象中；
        3，hierarchical：主键生成一个XXKey对象(key class)，Blob等单独生成一个对象，其他简单属性在一个对象中(record class)
    targetRuntime:
        1，MyBatis3：默认的值，生成基于MyBatis3.x以上版本的内容，包括XXXBySample；
        2，MyBatis3Simple：类似MyBatis3，只是不生成XXXBySample；
    introspectedColumnImpl：类全限定名，用于扩展MBG
    -->
	<!--classPathEntry:数据库的JDBC驱动,换成你自己的驱动位置 可选 -->
	<!-- 一个数据库一个context,defaultModelType="flat" 大数据字段，不分表 -->
	<context id="MysqlTables" targetRuntime="MyBatis3"
		defaultModelType="flat">

		<!-- 自动识别数据库关键字，默认false，如果设置为true，根据SqlReservedWords中定义的关键字列表；一般保留默认值，遇到数据库关键字（Java关键字），使用columnOverride覆盖 -->
		<property name="autoDelimitKeywords" value="true" />

		<!-- 生成的Java文件的编码 -->
		<property name="javaFileEncoding" value="utf-8" />

		<!-- beginningDelimiter和endingDelimiter：指明数据库的用于标记数据库对象名的符号，比如ORACLE就是双引号，MYSQL默认是`反引号； -->
		<property name="beginningDelimiter" value="`" />
		<property name="endingDelimiter" value="`" />

		<!-- 格式化java代码 -->
		<property name="javaFormatter"
			value="org.mybatis.generator.api.dom.DefaultJavaFormatter" />

		<!-- 格式化XML代码 -->
		<property name="xmlFormatter"
			value="org.mybatis.generator.api.dom.DefaultXmlFormatter" />
		<plugin type="org.mybatis.generator.plugins.SerializablePlugin" />
		<plugin type="org.mybatis.generator.plugins.ToStringPlugin" />
		<plugin type="tk.mybatis.mapper.generator.MapperPlugin">
			<!--自定义通用Mapper接口，将来所有生成的mapper接口都会继承这个接口 -->
			<property name="mappers" value="com.jthink.common.config.TkMapper" />
			<!--强制生成注解，不管entity与表名是否一致 -->
			<property name="forceAnnotation" value="true" />
			<!--区分大小写 -->
			<property name="caseSensitive" value="true" />
		</plugin>
		<!-- 注释 -->
		<commentGenerator>
			<property name="suppressAllComments" value="false" /><!-- 是否取消注释 -->
			<property name="suppressDate" value="false" /> <!-- 是否生成注释代时间戳 -->
		</commentGenerator>

		<!-- jdbc连接 -->
		<jdbcConnection driverClass="com.mysql.cj.jdbc.Driver"
			connectionURL="jdbc:mysql://localhost:3306/jthink?serverTimezone=UTC"
			userId="root" password="root" />

		<!-- 类型转换 -->
		<javaTypeResolver>
			<!-- 是否使用bigDecimal， false可自动转化以下类型（Long, Integer, Short, etc.） -->
			<property name="forceBigDecimals" value="false" />
		</javaTypeResolver>

		<!-- 生成实体类地址 -->
		<javaModelGenerator
			targetPackage="com.jthink.shop.entity"
			targetProject="src/main/java">
			<!-- 是否让schema作为包的后缀 -->
			<property name="enableSubPackages" value="false" />
			<!-- 从数据库返回的值去掉前后空格 -->
			<property name="trimStrings" value="true" />
		</javaModelGenerator>

		<!-- 生成map.xml文件存放地址 -->
		<sqlMapGenerator targetPackage="mapper"
			targetProject="src/main/resources">
			<property name="enableSubPackages" value="false" />
		</sqlMapGenerator>

		<!-- 生成接口dao -->
		<javaClientGenerator
			targetPackage="com.jthink.shop.mapper" targetProject="src/main/java"
			type="XMLMAPPER">
			<property name="enableSubPackages" value="false" />
		</javaClientGenerator>

		<!-- table可以有多个,每个数据库中的表都可以写一个table，tableName表示要匹配的数据库表,也可以在tableName属性中通过使用%通配符来匹配所有数据库表,只有匹配的表才会自动生成文件 
			enableSelectByPrimaryKey相应的配置表示是否生成相应的接口 -->
		<table tableName="jk_spuval_relation" domainObjectName="SpuvalRelation" enableCountByExample="false"
			enableUpdateByExample="false" enableDeleteByExample="false"
			enableSelectByExample="false" selectByExampleQueryId="false"
			enableSelectByPrimaryKey="true" enableUpdateByPrimaryKey="false"
			enableDeleteByPrimaryKey="false">
			<!-- 采用驼峰式命名方式  -->
			<property name="useActualColumnNames" value="false" />
			<generatedKey column="id" sqlStatement="Mysql" identity="true"/>
			<!-- 生成的对象去掉表前台比如sys_user 要去掉Sys 因为生成对象是Sys_user  -->
		   <domainObjectRenamingRule searchString="^Jk" replaceString="" />
		   <!-- 默认text列类型要转成Blog配置，通过如下配置。则会忽略 -->
		   <columnOverride column="post_content" jdbcType="VARCHAR"></columnOverride>
		   <columnOverride column="post_excerpt" jdbcType="VARCHAR"></columnOverride>
		</table>

	</context>
</generatorConfiguration>